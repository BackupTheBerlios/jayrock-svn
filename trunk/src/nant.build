<?xml version="1.0" encoding="utf-8" ?>
<!--
//
// Jayrock - JSON and JSON-RPC for Microsoft .NET Framework and Mono
// Written by Atif Aziz (atif.aziz@skybow.com)
// Copyright (c) 2005 Atif Aziz. All rights reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
//
-->
<project default="all" xmlns="http://nant.sf.net/schemas/nant.xsd">

    <echo message="NOTE: Code coverage has been disabled in the &apos;all&apos; and" />
    <echo message="&apos;build&apos; targets since NCover appears to fail on some machines." />
    <echo message="To get code coverage, build the &apos;cover&apos; target. Also coverage" />
    <echo message="via NCover is only available on Win32 platforms." />

    <!--======================== PROPERTY SECTION ========================-->

    <!-- General -->

    <property name="project.name" value="Jayrock" />
    <property name="project.basedir" value="${project::get-base-directory()}" />
    <property name="tools" value="${path::combine(project.basedir, '../tools')}" />

    <!-- NCover (code coverage) -->

    <property name="ncover.dir.path" value="${path::combine(tools, 'NCover')}" />
    <property name="ncover.console.exe.path" value="${path::combine(ncover.dir.path, 'NCover.Console.exe')}" />

    <!-- NCoverExplorer (code coverage) -->

    <property name="ncoverexplorer.dir.path" value="${path::combine(tools, 'NCoverExplorer')}" />
    <property name="ncoverexplorer.console.exe.path" value="${path::combine(ncoverexplorer.dir.path, 'NCoverExplorer.Console.exe')}" />

    <!-- NUnit 2.2.3 (unit-testing) -->

    <property name="tests" value="${path::combine(project.basedir, '../tests')}" />
    <property name="nunit.dir.path" value="${path::combine(tools, 'NUnit 2.2.3')}" />
    <property name="nunit.console.exe.path" value="${path::combine(nunit.dir.path, 'nunit-console.exe')}" />

    <!-- Output and Binaries -->

    <property name="bin.dir.name" value="../bin" />
    <property name="bin.dir.path" value="${path::combine(project.basedir, bin.dir.name)}" />
    <property name="bin.debug.dir.path" value="${path::combine(bin.dir.path, 'Debug')}" />
    <property name="bin.release.dir.path" value="${path::combine(bin.dir.path, 'Release')}" />
    <property name="bin.test.dir.path" value="${path::combine(bin.dir.path, 'Test')}" />

    <property name="output.assembly.name" value="${project.name}" />
    <property name="output.assembly.filename" value="${output.assembly.name + '.dll'}" />

    <property name="output.jsonassembly.name" value="${project.name + '.Json'}" />
    <property name="output.jsonassembly.filename" value="${output.jsonassembly.name + '.dll'}" />

    <property name="output.testassembly.name" value="${project.name + '.Tests'}" />
    <property name="output.testassembly.filename" value="${output.testassembly.name + '.dll'}" />
    <property name="output.testassembly.path" value="${path::combine(bin.test.dir.path, output.testassembly.filename)}" />

    <!-- Web -->

    <property name="www.dir.path" value="${path::combine(project.basedir, '../www')}" />
    <property name="www.bin.dir.path" value="${path::combine(www.dir.path, 'bin')}" />

    <!-- Build -->

    <property name="build.dir.path" value="${path::combine(project.basedir, '../build')}" />

    <!-- Mailing -->

    <property name="smtp.server" value="" />
    <if test="${environment::variable-exists('SMTPSERVER')}">
        <property name="smtp.server" value="${environment::get-variable('SMTPSERVER')}" />
    </if>
    <property name="mail.from" value="buildserver@jayrock.org" />
    <property name="mail.to" value="atif.aziz@skybow.com" />

    <!-- Draco (build server) -->

    <property name="draco" value="false" overwrite="false" />

    <!--======================== PROPERTY SECTION ========================-->

    <target name="clean">
        <delete dir="${bin.dir.path}" if="${directory::exists(bin.dir.path)}" />
        <delete dir="Jayrock/obj" if="${directory::exists('Jayrock/obj')}" />
        <delete dir="Jayrock.Json/obj" if="${directory::exists('Jayrock.Json/obj')}" />
        <delete if="${directory::exists(www.bin.dir.path)}">
            <fileset basedir="${www.bin.dir.path}">
                <include name="Jayrock.dll" />
                <include name="Jayrock.pdb" />
                <include name="Jayrock.Json.dll" />
                <include name="Jayrock.Json.pdb" />
            </fileset>
        </delete>
    </target>

    <target name="debug">
        <property name="output.dir.path" value="${bin.debug.dir.path}" />
        <property name="debuginfo" value="Full" />
        <property name="optimize" value="false" />
        <property name="define.symbols" value="DEBUG,TRACE" />
        <call target="compile" />
        <call target="update-web" />
    </target>

    <target name="release">
        <property name="output.dir.path" value="${bin.release.dir.path}" />
        <property name="debuginfo" value="PdbOnly" />
        <property name="optimize" value="true" />
        <property name="define.symbols" value="TRACE" />
        <call target="compile" />
        <call target="update-web" />
    </target>

    <target name="compile">

        <property name="jayrock.json.dll.path" value="${path::combine(output.dir.path, 'Jayrock.Json.dll')}" />
        <property name="jayrock.dll.path" value="${path::combine(output.dir.path, 'Jayrock.dll')}" />

        <mkdir dir="${output.dir.path}" />

        <csc target="library" debug="${debuginfo}" optimize="${optimize}" define="${define.symbols}" output="${jayrock.json.dll.path}">
            <sources basedir="${project.basedir}">
                <include name="Common/**/*.cs" />
                <include name="Jayrock.Json/**/*.cs" />
            </sources>
            <references>
                <include name="System.dll" />
                <include name="System.Data.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Web.dll" />
            </references>
            <nowarn>
                <warning number="618" />
            </nowarn>
        </csc>

        <csc target="library" debug="${debuginfo}" define="${define.symbols}" output="${path::combine(output.dir.path, 'Jayrock.dll')}">
            <sources basedir="${project.basedir}">
                <include name="Common/**/*.cs" />
                <include name="Jayrock/**/*.cs" />
            </sources>
            <resources dynamicprefix="true">
                <include name="Jayrock/json.js" asis="true" />
            </resources>
            <references>
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Web.dll" />
                <include name="${jayrock.json.dll.path}" />
            </references>
            <nowarn>
                <warning number="618" />
            </nowarn>
        </csc>

    </target>

    <target name="compile-test" depends="debug">

        <copy todir="${bin.test.dir.path}" overwrite="true">
            <fileset basedir="${bin.debug.dir.path}">
                <include name="*.dll" />
                <include name="*.pdb" />
            </fileset>
        </copy>

        <mkdir dir="${bin.test.dir.path}" />

        <csc target="library" debug="Enable" output="${output.testassembly.path}">
            <sources basedir="../tests">
                <include name="Jayrock/**/*.cs" />
            </sources>
            <references>
                <include name="System.dll" />
                <include name="System.Data.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Web.dll" />
                <include name="System.Web.dll" />
                <include name="${jayrock.json.dll.path}" />
                <include name="${jayrock.dll.path}" />
                <include name="${path::combine(nunit.dir.path, 'nunit.framework.dll')}" />
            </references>
            <nowarn>
                <warning number="618" />
            </nowarn>
        </csc>

        <copy file="${path::combine(nunit.dir.path, 'nunit.framework.dll')}" todir="${bin.test.dir.path}" />

    </target>

    <target name="all">

        <call target="test" />
        <call target="debug" />
        <call target="release" />

    </target>

    <target name="test" depends="compile-test">
        <nunit2>
            <formatter type="Plain" />
            <test assemblyname="${output.testassembly.path}" />
        </nunit2>
    </target>

    <target name="cover" depends="compile-test" if="${platform::is-win32()}">
        <exec program="${ncover.console.exe.path}" commandline='/q /w "${bin.test.dir.path}" /o "${project.basedir}/coverage.xml" /a ${output.assembly.name};${output.jsonassembly.name} /c "${nunit.console.exe.path}" "\"${output.testassembly.path}\""' />
        <exec program="${ncoverexplorer.console.exe.path}" commandline='"${project.basedir}/coverage.xml" /html:coverage-report.html /report:2 /excluded /p:${project.name} /minCoverage:85 "/c:${project.basedir}/NCoverExplorer.config"' />
        <call target="draco" if="${draco}" />
    </target>

    <target name="build" depends="test debug release">

        <tstamp property="build.date" pattern="yyyy-MM-dd" />
        <tstamp property="build.datetime" pattern="yyyy-MM-dd-HHmm" />

        <!-- Delete files resulting from coverage and testing -->

        <delete file="${path::combine(path::combine(bin.dir.path, 'Test'), 'TestResult.xml')}" failonerror="false" />
        <delete file="coverage.xml" failonerror="false" />
        <delete file="coverage.xsl" failonerror="false" />

        <!-- 
            Create the build directory and then create zips and compressed
            tars of the two versions of the project, one with sources and 
            one without (called the binary version). The source version 
            includes everything in the project except previous builds. 
            The binary version includes only the project binaries 
            (excluding those from unit tests), samples and the web.
        -->

        <mkdir dir="${build.dir.path}" />

        <zip zipfile="${path::combine(build.dir.path, 'jayrock.zip')}" ziplevel="9">
            <fileset basedir="..">
                <include name="**/*" />
                <exclude name="build/**/*" />
            </fileset>
        </zip>
        <zip zipfile="${path::combine(build.dir.path, 'jayrock-bin.zip')}" ziplevel="9">
            <fileset basedir="..">
                <include name="*" />
                <include name="bin/**/*" />
                <exclude name="bin/Test/**/*" />
                <include name="samples/**/*" />
                <include name="www/**/*" />
            </fileset>
        </zip>

        <tar destfile="${path::combine(build.dir.path, 'jayrock.tar.gz')}" compression="GZip">
            <fileset basedir="..">
                <include name="**/*" />
                <exclude name="build/**/*" />
            </fileset>
        </tar>
        <tar destfile="${path::combine(build.dir.path, 'jayrock-bin.tar.gz')}" compression="GZip">
            <fileset basedir="..">
                <include name="*" />
                <include name="bin/**/*" />
                <exclude name="bin/Test/**/*" />
                <include name="samples/**/*" />
                <include name="www/**/*" />
            </fileset>
        </tar>

    </target>

    <target name="daily-build" depends="build">

        <property name="dailybuild.dir.path" value="${path::combine(build.dir.path, build.date)}" />
        <mkdir dir="${dailybuild.dir.path}" />
        <copy todir="${dailybuild.dir.path}">
            <fileset basedir="${build.dir.path}">
                <include name="*.zip" />
                <include name="*.gz" />
            </fileset>
        </copy>

    </target>

    <target name="update-web">

        <mkdir dir="${path::combine(www.dir.path, 'bin')}" />
        <copy todir="${path::combine(www.dir.path, 'bin')}" overwrite="true">
            <fileset basedir="${output.dir.path}">
                <include name="*.dll" />
                <include name="*.pdb" />
            </fileset>
        </copy>

    </target>

    <target name="draco">
        <fail if="${string::get-length(smtp.server) == 0}"
            message="You must specify an SMTP server host value via the SMTPSERVER environment variable for this build target to succeed." />
        <mail
            from="${mail.from}"
            tolist="${mail.to}"
            subject="Jayrock coverage for build ${build.id}"
            format="Html"
            mailhost="${smtp.server}">
            <files>
                <include name="${project.basedir}/coverage-report.htm" />
            </files>
        </mail>
    </target>

    <target name="props">

        <!-- 
            This target is used to check proper setup of properties 
            Find what: \<property name="{[^"]+}".+$
            Replace with: <echo message="\1 = ${\1}" />
        -->

        <echo message="project.basedir = ${project.basedir}" />
        <echo message="tools = ${tools}" />

        <echo message="ncover.dir.path = ${ncover.dir.path}" />
        <echo message="ncover.console.exe.path = ${ncover.console.exe.path}" />

        <echo message="tests= ${tests}" />
        <echo message="nunit.dir.path = ${nunit.dir.path}" />
        <echo message="nunit.console.exe.path = ${nunit.console.exe.path}" />

        <echo message="bin.dir.name = ${bin.dir.name}" />
        <echo message="bin.dir.path = ${bin.dir.path}" />
        <echo message="bin.debug.dir.path = ${bin.debug.dir.path}" />
        <echo message="bin.release.dir.path = ${bin.release.dir.path}" />
        <echo message="bin.test.dir.path = ${bin.test.dir.path}" />

        <echo message="output.assembly.name = ${output.assembly.name}" />
        <echo message="output.assembly.filename = ${output.assembly.filename}" />
        <echo message="output.jsonassembly.name= ${output.jsonassembly.name}" />
        <echo message="output.jsonassembly.filename = ${output.jsonassembly.filename}" />
        <echo message="output.testassembly.name = ${output.testassembly.name}" />
        <echo message="output.testassembly.filename = ${output.testassembly.filename}" />

        <echo message="www.dir.path = ${www.dir.path}" />
        <echo message="www.dir.path = ${www.bin.dir.path}" />

        <echo message="smtp.server = ${smtp.server}" />
        <echo message="mail.from = ${mail.from}" />
        <echo message="mail.to = ${mail.to}" />

        <echo message="draco = ${draco}" />

    </target>

</project>
